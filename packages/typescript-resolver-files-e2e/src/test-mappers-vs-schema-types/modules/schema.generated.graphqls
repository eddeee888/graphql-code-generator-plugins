type Account {
  id: ID!
  isSubscribed: Boolean!
}

type Cat implements Pet {
  age: Int!
  id: ID!
  likesToScratch: Boolean!
  name: String!
}

type Country {
  id: ID!
  name: String!
}

scalar DateTime

type Dog implements Pet {
  age: Int!
  id: ID!
  likesToDig: Boolean!
  name: String!
}

type Error {
  message: String!
}

type Mutation {
  topicCreate(input: TopicCreateInput!): TopicCreatePayload!
  topicEdit(input: TopicEditInput!): TopicEditPayload!
}

interface Pet {
  age: Int!
  id: ID!
  name: String!
}

type Profile {
  id: ID!
  user: User!
}

type ProfileMeta {
  id: ID!
  isCompleted: Boolean!
  score: String!
}

type Query {
  account: Account!
  me: UserPayload!
  topicById(id: ID!): TopicByIdPayload!
  topicsCreatedByUser(
    input: TopicsCreatedByUserInput!
  ): TopicsCreatedByUserPayload!
  userByAccountName(accountName: String!): UserPayload!
}

type Subscription {
  profileChanges: Profile!
}

type Topic {
  createdAt: DateTime!
  creator: User!
  id: ID!
  likedBy: [User!]!
  likedByNullable: [User]
  mostRelatedTopic: Topic
  name: String!
  relatedTopics: [Topic!]!
  url: String
}

union TopicByIdPayload = Error | TopicByIdResult

type TopicByIdResult {
  result: Topic
}

input TopicCreateInput {
  name: String!
  url: String
}

union TopicCreatePayload = Error | TopicCreateResult

type TopicCreateResult {
  result: Topic!
}

input TopicEditInput {
  id: ID!
  name: String!
  url: String
}

union TopicEditPayload = Error | TopicEditResult

type TopicEditResult {
  result: Topic!
}

input TopicsCreatedByUserInput {
  userId: ID!
}

union TopicsCreatedByUserPayload = Error | TopicsCreatedByUserResult

type TopicsCreatedByUserResult {
  result: [Topic!]!
}

type User {
  accountGitHub: String
  accountGoogle: String
  createdAt: DateTime!
  fullName: String!
  id: ID!
  role: UserRole!
}

union UserPayload = Error | UserResult

type UserResult {
  result: User
}

enum UserRole {
  ADMIN
  USER
}
