enum Country {
  AU
  NZ
  US
}

scalar CustomLogicScalar

scalar DateTime

interface Error {
  error: ErrorType!
}

enum ErrorType {
  FORBIDDEN_ERROR
  INPUT_VALIDATION_ERROR
  NOT_FOUND
  UNEXPECTED_ERROR
}

scalar JSON

type Mutation {
  topicCreate(input: TopicCreateInput!): TopicCreatePayload!
  topicEdit(input: TopicEditInput!): TopicEditPayload!
}

input PaginationInput {
  page: Int
  recordsPerPage: Int
}

type PaginationResult {
  currentPage: Int!
  recordsPerPage: Int!
  totalPageCount: Int!
}

type PayloadError implements Error {
  error: ErrorType!
}

type Pet {
  id: ID!
  name: String!
  primaryOwner: User!
}

type PetToy {
  id: ID!
  name: String!
}

type Profile {
  id: ID!
  user: User!
  zoo: Zoo!
}

type Query {
  me: UserPayload!
  topicById(id: ID!): TopicByIdPayload!
  topicsCreatedByUser(
    input: TopicsCreatedByUserInput!
  ): TopicsCreatedByUserPayload!
  userByAccountName(accountName: String!): UserPayload!
}

scalar SomeRandomScalar

enum SortOrder {
  ASC
  DESC
}

type Subscription {
  profileChanges: Profile!
}

type Topic {
  createdAt: DateTime!
  creator: User!
  id: ID!
  name: String!
  url: String
}

union TopicByIdPayload = PayloadError | TopicByIdResult

type TopicByIdResult {
  result: Topic
}

input TopicCreateInput {
  name: String!
  url: String
}

union TopicCreatePayload = PayloadError | TopicCreateResult

type TopicCreateResult {
  result: Topic!
}

input TopicEditInput {
  id: ID!
  name: String!
  url: String
}

union TopicEditPayload = PayloadError | TopicEditResult

type TopicEditResult {
  result: Topic!
}

input TopicsCreatedByUserInput {
  userId: ID!
}

union TopicsCreatedByUserPayload = PayloadError | TopicsCreatedByUserResult

type TopicsCreatedByUserResult {
  result: [Topic!]!
}

type User {
  accountGitHub: String
  accountLinkedIn: String
  accountName: String!
  accountTwitter: String
  accountWebsite: String
  avatar: String
  id: ID!
  name: String
  pets: [Pet!]!
}

union UserPayload = PayloadError | UserResult

type UserResult {
  result: User
}

type Zoo {
  id: ID!
  name: String!
}
