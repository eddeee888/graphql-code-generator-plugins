extend type Query {
  topicById(id: ID!): TopicByIdPayload!
  topicsCreatedByUser(
    input: TopicsCreatedByUserInput!
  ): TopicsCreatedByUserPayload!
}

extend type Mutation {
  topicCreate(input: TopicCreateInput!): TopicCreatePayload!
  topicEdit(input: TopicEditInput!): TopicEditPayload!
}

type Topic {
  id: ID!
  name: String!
  url: String
  creator: User!
  createdAt: DateTime!
}

type TopicByIdResult {
  result: Topic
}

union TopicByIdPayload = TopicByIdResult | PayloadError

input TopicsCreatedByUserInput {
  userId: ID!
}

type TopicsCreatedByUserResult {
  result: [Topic!]!
}

union TopicsCreatedByUserPayload = TopicsCreatedByUserResult | PayloadError

input TopicCreateInput {
  name: String!
  url: String
}

type TopicCreateResult {
  result: Topic!
}

union TopicCreatePayload = TopicCreateResult | PayloadError

input TopicEditInput {
  id: ID!
  name: String!
  url: String
}

type TopicEditResult {
  result: Topic!
}

union TopicEditPayload = TopicEditResult | PayloadError

extend type User {
  topics: [Topic!]!
}
