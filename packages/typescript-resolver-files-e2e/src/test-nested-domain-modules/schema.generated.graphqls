type Mutation {
  createSchoolCourse: SchoolCourse!
}

type Query {
  school(id: ID!): School
  schools: [School!]!
  student(id: ID!): Student
  teacher(id: ID!): Teacher
}

type School {
  courses: [SchoolCourse!]!
  demographics: SchoolDemographics
  id: ID!
  name: String!
}

type SchoolCourse {
  id: ID!
  name: String!
  students: [Student!]!
  teacher: Teacher!
}

type SchoolDemographics {
  averageStudentAge: Int
  averageStudentGPA: Float
  averageTeacherAge: Int
  averageTeacherExperience: Int
  id: ID!
  schoolId: ID!
  studentCount: Int!
  teacherCount: Int!
}

type Student {
  guardians: [StudentGuardian!]!
  id: ID!
  profile: StudentProfile
}

type StudentAvatar {
  eyeColor: String!
  hairColor: String!
  hairstyle: String!
  id: ID!
  skinColor: String!
}

type StudentGuardian {
  email: String!
  firstName: String!
  id: ID!
  lastName: String!
  phoneNumber: String
}

type StudentProfile {
  avatar: StudentAvatar
  email: String!
  firstName: String!
  id: ID!
  lastName: String!
  phoneNumber: String
}

type Subscription {
  profileChanges: StudentProfile!
}

type Teacher {
  id: ID!
  profile: TeacherProfile
}

type TeacherAvatar {
  id: ID!
  url: String!
}

type TeacherProfile {
  avatar: TeacherAvatar
  email: String!
  firstName: String!
  id: ID!
  lastName: String!
  phoneNumber: String
}
